{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Telegram Bash Bot","text":"<ul> <li>About this project</li> <li>Available Telegram Methods</li> <li>Stored Variables</li> <li>Deploying Bot</li> <li>Contributions</li> </ul>"},{"location":"#about","title":"About","text":"<p>A telegram bot written in bash, which can perform various functions over Telegram Bot API. You can take this project as a template for making your own bot.</p> <p>Uses https://core.telegram.org/bots/api for API calls.</p>"},{"location":"#what-is-telegram-bot","title":"What is Telegram Bot ?","text":"<p>Telegram bots are small programs that can embed in Telegram chats or public channels and perform a specific function. They can offer customized keyboards, produce cat memes on demand, or even accept payments and act as a digital storefront.</p>"},{"location":"#how-to-make-telegram-bot","title":"How to make telegram bot?","text":"<p>So we are here to help you. We are providing you this template for creating your own bot written in <code>bash</code>.</p>"},{"location":"#how-to-create-your-own-bot-using-this","title":"How to create your own Bot using this ?","text":"<p>Well, this would be lot easier if you are using this template. Below are guides to get started.</p>"},{"location":"#adding-your-own-features-to-bot","title":"Adding your own features to bot.","text":"<p>All functions of bot are present in <code>bot/</code> which are sourced to tgbot.sh. By this way we make our code look simpler and more human readable.</p>"},{"location":"#how-to-utilise-utilsh","title":"How to utilise <code>util.sh</code>?","text":"<p>We made calling Telegram Bot API simpler with help of <code>util.sh</code>. Like, You can send message by <code>tg --sendmsg \"&lt;chat id&gt;\"</code> and edit message by <code>tg --editmsg \"&lt;chat id&gt;\" \"&lt;message id&gt;\"</code>. More information here. We would be adding more Documentation on this topic in future.</p> <p>Above commands will only work when you have your <code>Bot token</code> stored in <code>.token.sh</code> file of current directory.</p>"},{"location":"#adding-more-methods-to-call-telegram-bot-api","title":"Adding more methods to call Telegram Bot API.","text":"<p>All functions related to Telegram Bot API are present in  <code>util.sh</code>. You can add new methods following the current style of <code>variable names</code> to look it simpler.</p>"},{"location":"#available-telegram-methods","title":"Available Telegram Methods","text":"<p>All these methods are defined in util.sh. If you think some methods are missing and you can add them, please go ahead and don't forget to open a pull request with the changes you made. Extension of this part.</p> <p>Commands listed below will only work when you have your <code>Bot token</code> stored in <code>.token.sh</code> file of current directory.</p>"},{"location":"#-sendmsg","title":"<code>--sendmsg</code>","text":"<ul> <li>Use this method to send text messages. On success, the sent Message is returned. <p>Example : <code>bash tg --sendmsg \"&lt;CHAT ID&gt;\" \"&lt;Text to Send&gt;\"</code></p> </li> </ul>"},{"location":"#-sendmarkdownv2msg","title":"<code>--sendmarkdownv2msg</code>","text":"<ul> <li>Same as <code>--sendmsg</code> but works with Telegram Formatting options MarkdownV2 style. <p>Example : <code>bash tg --sendmarkdownv2msg \"&lt;CHAT ID&gt;\" \"&lt;Text to Send with markdown&gt;\"</code></p> </li> </ul>"},{"location":"#-editmsg","title":"<code>--editmsg</code>","text":"<ul> <li>Use this method to edit a existing message sent by the bot. <p>Example : <code>bash tg --editmsg \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID&gt;\" \"&lt;Text to edit current message&gt;\"</code></p> </li> </ul>"},{"location":"#-editmarkdownv2msg","title":"<code>--editmarkdownv2msg</code>","text":"<ul> <li>Same as <code>--editmsg</code> but works with Telegram Formatting options MarkdownV2 style. <p>Example : <code>bash tg --editmarkdownv2msg \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE&gt;\" \"&lt;Text with markdown to edit current message&gt;\"</code></p> </li> </ul>"},{"location":"#-replymsg","title":"<code>--replymsg</code>","text":"<ul> <li>Use this method to reply a message. <p>Example : <code>bash tg --replymsg \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;Text to Reply&gt;\"</code></p> </li> </ul>"},{"location":"#-replyfile","title":"<code>--replyfile</code>","text":"<ul> <li>Use this method to reply a message with file. <p>Example : <code>bash tg --replyfile \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;Path of file to Reply&gt;\"</code></p> </li> </ul>"},{"location":"#-replymsghtml","title":"<code>--replymsghtml</code>","text":"<ul> <li>Use this method to reply a message but with <code>html</code> formatting. <p>Example : <code>bash tg --replymsghtml \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;Text to Reply with HTML Formatting&gt;\"</code></p> </li> </ul>"},{"location":"#-replymsgmarkdown","title":"<code>--replymsgmarkdown</code>","text":"<ul> <li>Same as <code>--replymsg</code> but works with Telegram Formatting options MarkdownV2 style. <p>Example : <code>bash tg --replymsgmarkdown \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;Text to Reply with markdown Formatting&gt;\"</code></p> </li> </ul>"},{"location":"#-delmsg","title":"<code>--delmsg</code>","text":"<ul> <li>Use this method to delete telegram message. <p>Example : <code>bash tg --delmsg \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO DELETE&gt;\"</code></p> </li> </ul>"},{"location":"#-sendsticker","title":"<code>--sendsticker</code>","text":"<ul> <li>Use this method to send sticker. <p>Example : <code>bash tg --sendsticker \"&lt;CHAT_ID&gt;\" \"&lt;FILE ID OF STICKER TO SEND\"</code></p> </li> </ul>"},{"location":"#-replysticker","title":"<code>--replysticker</code>","text":"<ul> <li>Use thid method to reply a message with sticker. <p>Example : <code>bash tg --replysticker \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;FILE ID OF STICKER TO REPLY\"</code></p> </li> </ul>"},{"location":"#-fwdmsg","title":"<code>--fwdmsg</code>","text":"<ul> <li>Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned. <p>Example : <code>bash tg --fwdmsg \"&lt;CHAT ID TO FORWARD FROM&gt;\" \"&lt;CHAT ID TO FORWARD FROM&gt;\" \"MESSAGE OF MESSAGE TO FORWARD\"</code></p> </li> </ul>"},{"location":"#-cpmsg","title":"<code>--cpmsg</code>","text":"<ul> <li>Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success. <p>Example : <code>bash tg --cpmsg \"&lt;CHAT ID TO FORWARD FROM&gt;\" \"&lt;CHAT ID TO FORWARD FROM&gt;\" \"MESSAGE ID OF MESSAGE TO FORWARD\"</code></p> </li> </ul>"},{"location":"#-pinmsg","title":"<code>--pinmsg</code>","text":"<ul> <li>Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success. <p>Example : <code>bash tg --pinmsg \"&lt;CHAT ID&gt;\" \"MESSAGE ID OF MESSAGE TO PIN\"</code></p> </li> </ul>"},{"location":"#-unpinmsg","title":"<code>--unpinmsg</code>","text":"<ul> <li>Use this method to remove a message from the list of pinned messages in a chat. <p>Example : <code>bash tg --unpinmsg \"&lt;CHAT_ID&gt;\" \"MESSAGE ID OF MESSAGE TO UNPIN\"</code></p> </li> </ul>"},{"location":"#-getuserpfp","title":"<code>--getuserpfp</code>","text":"<ul> <li>Use this method to get a list of profile pictures for a user. <p>Example : <code>bash tg --getuserpfp \"&lt;CHAT ID&gt;\" \"&lt;USER ID OF USER&gt;\"</code></p> </li> </ul>"},{"location":"#-downloadfile","title":"<code>--downloadfile</code>","text":"<ul> <li>Use this method to download a file. <p>Example : <code>bash tg --downloadfile \"&lt;FILE ID&gt;\" \"&lt;OUTPUT FILE PATH WITH NAME AND EXTENSION&gt;\"</code></p> </li> </ul>"},{"location":"#-ban","title":"<code>--ban</code>","text":"<ul> <li>Use this method to ban a user. <p>Example : <code>bash tg --ban \"&lt;CHAT ID&gt;\" \"&lt;USER ID OF USER TO BAN&gt;\"</code></p> </li> </ul>"},{"location":"#-unban","title":"<code>--unban</code>","text":"<ul> <li>Use this method to unban a user. <p>Example : <code>bash tg --unban \"&lt;CHAT ID&gt;\" \"&lt;USER ID OF USER TO UNBAN&gt;\"</code></p> </li> </ul>"},{"location":"#-sendaudiofile","title":"<code>--sendaudiofile</code>","text":"<ul> <li>Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. <p>Example : <code>bash tg --sendaudiofile \"&lt;CHAT ID&gt;\" \"&lt;PATH OF AUDIO FILE&gt;\" \"&lt;CAPTION (Optional)\"</code></p> </li> </ul>"},{"location":"#-sendvoicefile","title":"<code>--sendvoicefile</code>","text":"<ul> <li>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). <p>Example : <code>bash tg --sendvoicefile \"&lt;CHAT ID&gt;\" \"&lt;PATH OF AUDIO FILE&gt;\" \"&lt;CAPTION (Optional)\"</code></p> </li> </ul>"},{"location":"#stored-variables","title":"Stored Variables","text":"<p>These are the variable stored by Update Function, which is used to get Updates from the bot in the present chats. So, we store all important variable returned by Telegram Bot API Get Updates.</p>"},{"location":"#1-all-different-ids","title":"1. All DIfferent IDs","text":""},{"location":"#ret_msg_id","title":"RET_MSG_ID","text":"<ul> <li>This Variable Store the Message ID of the message the Update Function returned.</li> </ul>"},{"location":"#ret_chat_id","title":"RET_CHAT_ID","text":"<ul> <li>This Variable Store the Chat ID of the Chat the Update Function returned.</li> </ul>"},{"location":"#ret_chat_type","title":"RET_CHAT_TYPE","text":"<ul> <li>This Variable Store the Chat Type of the Chat the Update Function returned.</li> </ul>"},{"location":"#msgger","title":"MSGGER","text":"<ul> <li>This Variable Store the User ID of the Messager the Update Function returned.</li> </ul>"},{"location":"#ret_file_id","title":"RET_FILE_ID","text":"<ul> <li>This Variable Store the File ID of the File the Update Function returned.</li> </ul>"},{"location":"#2-all-different-strings","title":"2. All DIfferent Strings","text":""},{"location":"#ret_msg_text","title":"RET_MSG_TEXT","text":"<ul> <li>This Variable Store the text of the Message the Update Function returned.</li> </ul>"},{"location":"#first_name","title":"FIRST_NAME","text":"<ul> <li>This Variable Store the First Name of the Messager the Update Function returned.</li> </ul>"},{"location":"#last_name","title":"LAST_NAME","text":"<ul> <li>This Variable Store the Last Name of the Messager the Update Function returned.</li> </ul>"},{"location":"#username","title":"USERNAME","text":"<ul> <li>This Variable Store the Username of the Messager the Update Function returned.</li> </ul>"},{"location":"#3-replies","title":"3. Replies","text":""},{"location":"#ret_replied_msg_id","title":"RET_REPLIED_MSG_ID","text":"<ul> <li>This Variable Store the Message ID of the message to which the current message have been replied to.</li> </ul>"},{"location":"#ret_replied_msgger_id","title":"RET_REPLIED_MSGGER_ID","text":"<ul> <li>This Variable Store the User ID of the User to which the current message have been replied to.</li> </ul>"},{"location":"#ret_replied_msgger_first_name","title":"RET_REPLIED_MSGGER_FIRST_NAME","text":"<ul> <li>This Variable Store the Fisrt Name of the Messager to which the current message have been replied to.</li> </ul>"},{"location":"#ret_replied_msgger_last_name","title":"RET_REPLIED_MSGGER_LAST_NAME","text":"<ul> <li>This Variable Store the Last Name of the Messager to which the current message have been replied to.</li> </ul>"},{"location":"#ret_replied_msgger_username","title":"RET_REPLIED_MSGGER_USERNAME","text":"<ul> <li>This Variable Store the Username of the messager to which the current message have been replied to.</li> </ul>"},{"location":"#ret_replied_msg_text","title":"RET_REPLIED_MSG_TEXT","text":"<ul> <li>This Variable Store the Text of the message to which the current message have been replied to.</li> </ul>"},{"location":"#ret_replied_file_id","title":"RET_REPLIED_FILE_ID","text":"<ul> <li>This Variable Store the File ID of the File to which the current message have been replied to.</li> </ul>"},{"location":"#4-stickers","title":"4. Stickers","text":""},{"location":"#sticker_emoji","title":"STICKER_EMOJI","text":"<ul> <li>This Variable Store the Emoji of the Sticker the Update Function returned.</li> </ul>"},{"location":"#sticker_file_id","title":"STICKER_FILE_ID","text":"<ul> <li>This Variable Store the File ID of the Sticker the Update Function returned.</li> </ul>"},{"location":"#sticker_emoji_1","title":"STICKER_EMOJI","text":"<ul> <li>This Variable Store the Name of the Sticker Pack the Update Function returned.</li> </ul>"},{"location":"#deploying-bot","title":"Deploying Bot","text":"<p>All you need is <code>bash</code> to be installed in your system with some other dependencies listed below. We even have Docker support (Beta).</p>"},{"location":"#deploying-locally","title":"Deploying Locally","text":"<p>You can easily deploy this bot locally. It can run in termux too without much pain.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>git</li> <li>curl</li> <li>jq</li> <li>bc</li> <li>shuf</li> <li>neofetch</li> </ul> <p>Some other Dependencies too but mostly they are pre-installed on most systems. Full list will be updated soon.</p>"},{"location":"#clone-this-repo","title":"Clone this repo","text":"<p>You need to clone this repo for further operations.</p> <pre><code>git clone https://github.com/noobyysauraj/telegram-bash-bot &amp;&amp; cd telegram-bash-bot\n</code></pre>"},{"location":"#running-bot-interactive-mode","title":"Running bot (interactive mode)","text":"<p>Recquired first time for setting up your config.</p> <pre><code>bash init.sh\n</code></pre>"},{"location":"#running-bot-non-interactive","title":"Running bot (non-interactive)","text":"<p>Make sure your configs are stored in <code>.token</code> before running in non-interactive mode.</p> <pre><code>bash tgbot.sh\n</code></pre>"},{"location":"#deploying-on-railway","title":"Deploying on Railway","text":"<p>Hopefully, We have Docker support (Beta). So, it won't be pain to Deploy on Railway. - Just login. - Make a project. - Select this repo/your modified repo. - Add custom variable to your project. Check here, how to add custom variable in railway.</p>"},{"location":"#variables","title":"Variables","text":"<p>Add these variables if you want to run the bot in non-interactive mode.</p> <pre><code>TOKEN=\"&lt;Bot Token of your bot&gt;\"\nBOT_OWNER_ID=\"&lt;Owner ID&gt;\"\nWEATH_API_KEY=\"&lt;Weather Api key&gt;\" #https://rapidapi.com/apishub/api/yahoo-weather5 (.weath won't work without this.)\n</code></pre>"},{"location":"#contributions","title":"Contributions","text":"<p>Feel free to contribute to any part of this project. (Like Documentation, Adding more methods and feature and endless possiblities).</p> <p>By @noobyysauraj and @Hakimi0804</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about","title":"About","text":"<p>A telegram bot written in bash, which can perform various functions over Telegram Bot API. You can take this project as a template for making your own bot.</p> <p>Uses https://core.telegram.org/bots/api for API calls.</p>"},{"location":"about/#what-is-telegram-bot","title":"What is Telegram Bot ?","text":"<p>Telegram bots are small programs that can embed in Telegram chats or public channels and perform a specific function. They can offer customized keyboards, produce cat memes on demand, or even accept payments and act as a digital storefront.</p>"},{"location":"about/#how-to-make-telegram-bot","title":"How to make telegram bot?","text":"<p>So we are here to help you. We are providing you this template for creating your own bot written in <code>bash</code>.</p>"},{"location":"about/#how-to-create-your-own-bot-using-this","title":"How to create your own Bot using this ?","text":"<p>Well, this would be lot easier if you are using this template. Below are guides to get started.</p>"},{"location":"about/#adding-your-own-features-to-bot","title":"Adding your own features to bot.","text":"<p>All functions of bot are present in <code>bot/</code> which are sourced to tgbot.sh. By this way we make our code look simpler and more human readable.</p>"},{"location":"about/#how-to-utilise-utilsh","title":"How to utilise <code>util.sh</code>?","text":"<p>We made calling Telegram Bot API simpler with help of <code>util.sh</code>. Like, You can send message by <code>tg --sendmsg \"&lt;chat id&gt;\"</code> and edit message by <code>tg --editmsg \"&lt;chat id&gt;\" \"&lt;message id&gt;\"</code>. More information here. We would be adding more Documentation on this topic in future.</p> <p>Above commands will only work when you have your <code>Bot token</code> stored in <code>.token.sh</code> file of current directory.</p>"},{"location":"about/#adding-more-methods-to-call-telegram-bot-api","title":"Adding more methods to call Telegram Bot API.","text":"<p>All functions related to Telegram Bot API are present in  <code>util.sh</code>. You can add new methods following the current style of <code>variable names</code> to look it simpler.</p>"},{"location":"contributions/","title":"Contributions","text":""},{"location":"contributions/#contributions","title":"Contributions","text":"<p>Feel free to contribute to any part of this project. (Like Documentation, Adding more methods and feature and endless possiblities).</p> <p>By @noobyysauraj and @Hakimi0804</p>"},{"location":"deploying/","title":"Deploying","text":""},{"location":"deploying/#deploying-bot","title":"Deploying Bot","text":"<p>All you need is <code>bash</code> to be installed in your system with some other dependencies listed below. We even have Docker support (Beta).</p>"},{"location":"deploying/#deploying-locally","title":"Deploying Locally","text":"<p>You can easily deploy this bot locally. It can run in termux too without much pain.</p>"},{"location":"deploying/#dependencies","title":"Dependencies","text":"<ul> <li>git</li> <li>curl</li> <li>jq</li> <li>bc</li> <li>shuf</li> <li>neofetch</li> <li>ffmpeg</li> </ul> <p>Some other Dependencies too but mostly they are pre-installed on most systems. Full list will be updated soon.</p>"},{"location":"deploying/#clone-this-repo","title":"Clone this repo","text":"<p>You need to clone this repo for further operations.</p> <pre><code>git clone https://github.com/noobyysauraj/telegram-bash-bot &amp;&amp; cd telegram-bash-bot\n</code></pre>"},{"location":"deploying/#running-bot-interactive-mode","title":"Running bot (interactive mode)","text":"<p>Recquired first time for setting up your config.</p> <pre><code>bash init.sh\n</code></pre>"},{"location":"deploying/#running-bot-non-interactive","title":"Running bot (non-interactive)","text":"<p>Make sure your configs are stored in <code>.token</code> before running in non-interactive mode.</p> <pre><code>bash tgbot.sh\n</code></pre>"},{"location":"deploying/#deploying-on-railway","title":"Deploying on Railway","text":"<p>Hopefully, We have Docker support (Beta). So, it won't be pain to Deploy on Railway. - Just login. - Make a project. - Select this repo/your modified repo. - Add custom variable to your project. Check here, how to add custom variable in railway.</p>"},{"location":"deploying/#variables","title":"Variables","text":"<p>Add these variables if you want to run the bot in non-interactive mode.</p> <pre><code>TOKEN=\"&lt;Bot Token of your bot&gt;\"\nBOT_OWNER_ID=\"&lt;Owner ID&gt;\"\nWEATH_API_KEY=\"&lt;Weather Api key&gt;\" #https://rapidapi.com/apishub/api/yahoo-weather5 (.weath won't work without this.)\n</code></pre>"},{"location":"supported_methods/","title":"Supported methods","text":""},{"location":"supported_methods/#adding-more-methods-to-call-telegram-bot-api","title":"Adding more methods to call Telegram Bot API.","text":"<p>All functions related to Telegram Bot API are present in  <code>util.sh</code>. You can add new methods following the current style of <code>variable names</code> to look it simpler.</p>"},{"location":"supported_methods/#available-telegram-methods","title":"Available Telegram Methods","text":"<p>All these methods are defined in util.sh. If you think some methods are missing and you can add them, please go ahead and don't forget to open a pull request with the changes you made. Extension of this part.</p> <p>Commands listed below will only work when you have your <code>Bot token</code> stored in <code>.token.sh</code> file of current directory.</p>"},{"location":"supported_methods/#-sendmsg","title":"<code>--sendmsg</code>","text":"<ul> <li>Use this method to send text messages. On success, the sent Message is returned. <p>Example : <code>bash tg --sendmsg \"&lt;CHAT ID&gt;\" \"&lt;Text to Send&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-sendmarkdownv2msg","title":"<code>--sendmarkdownv2msg</code>","text":"<ul> <li>Same as <code>--sendmsg</code> but works with Telegram Formatting options MarkdownV2 style. <p>Example : <code>bash tg --sendmarkdownv2msg \"&lt;CHAT ID&gt;\" \"&lt;Text to Send with markdown&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-editmsg","title":"<code>--editmsg</code>","text":"<ul> <li>Use this method to edit a existing message sent by the bot. <p>Example : <code>bash tg --editmsg \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID&gt;\" \"&lt;Text to edit current message&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-editmarkdownv2msg","title":"<code>--editmarkdownv2msg</code>","text":"<ul> <li>Same as <code>--editmsg</code> but works with Telegram Formatting options MarkdownV2 style. <p>Example : <code>bash tg --editmarkdownv2msg \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE&gt;\" \"&lt;Text with markdown to edit current message&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-replymsg","title":"<code>--replymsg</code>","text":"<ul> <li>Use this method to reply a message. <p>Example : <code>bash tg --replymsg \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;Text to Reply&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-replyfile","title":"<code>--replyfile</code>","text":"<ul> <li>Use this method to reply a message with file. <p>Example : <code>bash tg --replyfile \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;Path of file to Reply&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-replymsghtml","title":"<code>--replymsghtml</code>","text":"<ul> <li>Use this method to reply a message but with <code>html</code> formatting. <p>Example : <code>bash tg --replymsghtml \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;Text to Reply with HTML Formatting&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-replymsgmarkdown","title":"<code>--replymsgmarkdown</code>","text":"<ul> <li>Same as <code>--replymsg</code> but works with Telegram Formatting options MarkdownV2 style. <p>Example : <code>bash tg --replymsgmarkdown \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;Text to Reply with markdown Formatting&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-delmsg","title":"<code>--delmsg</code>","text":"<ul> <li>Use this method to delete telegram message. <p>Example : <code>bash tg --delmsg \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO DELETE&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-sendsticker","title":"<code>--sendsticker</code>","text":"<ul> <li>Use this method to send sticker. <p>Example : <code>bash tg --sendsticker \"&lt;CHAT_ID&gt;\" \"&lt;FILE ID OF STICKER TO SEND\"</code></p> </li> </ul>"},{"location":"supported_methods/#-replysticker","title":"<code>--replysticker</code>","text":"<ul> <li>Use thid method to reply a message with sticker. <p>Example : <code>bash tg --replysticker \"&lt;CHAT ID&gt;\" \"&lt;MESSAGE ID OF MESSAGE TO REPLY&gt;\" \"&lt;FILE ID OF STICKER TO REPLY\"</code></p> </li> </ul>"},{"location":"supported_methods/#-fwdmsg","title":"<code>--fwdmsg</code>","text":"<ul> <li>Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned. <p>Example : <code>bash tg --fwdmsg \"&lt;CHAT ID TO FORWARD FROM&gt;\" \"&lt;CHAT ID TO FORWARD FROM&gt;\" \"MESSAGE OF MESSAGE TO FORWARD\"</code></p> </li> </ul>"},{"location":"supported_methods/#-cpmsg","title":"<code>--cpmsg</code>","text":"<ul> <li>Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success. <p>Example : <code>bash tg --cpmsg \"&lt;CHAT ID TO FORWARD FROM&gt;\" \"&lt;CHAT ID TO FORWARD FROM&gt;\" \"MESSAGE ID OF MESSAGE TO FORWARD\"</code></p> </li> </ul>"},{"location":"supported_methods/#-pinmsg","title":"<code>--pinmsg</code>","text":"<ul> <li>Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success. <p>Example : <code>bash tg --pinmsg \"&lt;CHAT ID&gt;\" \"MESSAGE ID OF MESSAGE TO PIN\"</code></p> </li> </ul>"},{"location":"supported_methods/#-unpinmsg","title":"<code>--unpinmsg</code>","text":"<ul> <li>Use this method to remove a message from the list of pinned messages in a chat. <p>Example : <code>bash tg --unpinmsg \"&lt;CHAT_ID&gt;\" \"MESSAGE ID OF MESSAGE TO UNPIN\"</code></p> </li> </ul>"},{"location":"supported_methods/#-getuserpfp","title":"<code>--getuserpfp</code>","text":"<ul> <li>Use this method to get a list of profile pictures for a user. <p>Example : <code>bash tg --getuserpfp \"&lt;CHAT ID&gt;\" \"&lt;USER ID OF USER&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-downloadfile","title":"<code>--downloadfile</code>","text":"<ul> <li>Use this method to download a file. <p>Example : <code>bash tg --downloadfile \"&lt;FILE ID&gt;\" \"&lt;OUTPUT FILE PATH WITH NAME AND EXTENSION&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-ban","title":"<code>--ban</code>","text":"<ul> <li>Use this method to ban a user. <p>Example : <code>bash tg --ban \"&lt;CHAT ID&gt;\" \"&lt;USER ID OF USER TO BAN&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-unban","title":"<code>--unban</code>","text":"<ul> <li>Use this method to unban a user. <p>Example : <code>bash tg --unban \"&lt;CHAT ID&gt;\" \"&lt;USER ID OF USER TO UNBAN&gt;\"</code></p> </li> </ul>"},{"location":"supported_methods/#-sendaudiofile","title":"<code>--sendaudiofile</code>","text":"<ul> <li>Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. <p>Example : <code>bash tg --sendaudiofile \"&lt;CHAT ID&gt;\" \"&lt;PATH OF AUDIO FILE&gt;\" \"&lt;CAPTION (Optional)\"</code></p> </li> </ul>"},{"location":"supported_methods/#-sendvoicefile","title":"<code>--sendvoicefile</code>","text":"<ul> <li>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). <p>Example : <code>bash tg --sendvoicefile \"&lt;CHAT ID&gt;\" \"&lt;PATH OF AUDIO FILE&gt;\" \"&lt;CAPTION (Optional)\"</code></p> </li> </ul>"},{"location":"variables/","title":"Variables","text":""},{"location":"variables/#stored-variables","title":"Stored Variables","text":"<p>These are the variable stored by Update Function, which is used to get Updates from the bot in the present chats. So, we store all important variable returned by Telegram Bot API Get Updates.</p>"},{"location":"variables/#1-all-different-ids","title":"1. All DIfferent IDs","text":""},{"location":"variables/#ret_msg_id","title":"RET_MSG_ID","text":"<ul> <li>This Variable Store the Message ID of the message the Update Function returned.</li> </ul>"},{"location":"variables/#ret_chat_id","title":"RET_CHAT_ID","text":"<ul> <li>This Variable Store the Chat ID of the Chat the Update Function returned.</li> </ul>"},{"location":"variables/#ret_chat_type","title":"RET_CHAT_TYPE","text":"<ul> <li>This Variable Store the Chat Type of the Chat the Update Function returned.</li> </ul>"},{"location":"variables/#msgger","title":"MSGGER","text":"<ul> <li>This Variable Store the User ID of the Messager the Update Function returned.</li> </ul>"},{"location":"variables/#ret_file_id","title":"RET_FILE_ID","text":"<ul> <li>This Variable Store the File ID of the File the Update Function returned.</li> </ul>"},{"location":"variables/#2-all-different-strings","title":"2. All DIfferent Strings","text":""},{"location":"variables/#ret_msg_text","title":"RET_MSG_TEXT","text":"<ul> <li>This Variable Store the text of the Message the Update Function returned.</li> </ul>"},{"location":"variables/#first_name","title":"FIRST_NAME","text":"<ul> <li>This Variable Store the First Name of the Messager the Update Function returned.</li> </ul>"},{"location":"variables/#last_name","title":"LAST_NAME","text":"<ul> <li>This Variable Store the Last Name of the Messager the Update Function returned.</li> </ul>"},{"location":"variables/#username","title":"USERNAME","text":"<ul> <li>This Variable Store the Username of the Messager the Update Function returned.</li> </ul>"},{"location":"variables/#3-replies","title":"3. Replies","text":""},{"location":"variables/#ret_replied_msg_id","title":"RET_REPLIED_MSG_ID","text":"<ul> <li>This Variable Store the Message ID of the message to which the current message have been replied to.</li> </ul>"},{"location":"variables/#ret_replied_msgger_id","title":"RET_REPLIED_MSGGER_ID","text":"<ul> <li>This Variable Store the User ID of the User to which the current message have been replied to.</li> </ul>"},{"location":"variables/#ret_replied_msgger_first_name","title":"RET_REPLIED_MSGGER_FIRST_NAME","text":"<ul> <li>This Variable Store the Fisrt Name of the Messager to which the current message have been replied to.</li> </ul>"},{"location":"variables/#ret_replied_msgger_last_name","title":"RET_REPLIED_MSGGER_LAST_NAME","text":"<ul> <li>This Variable Store the Last Name of the Messager to which the current message have been replied to.</li> </ul>"},{"location":"variables/#ret_replied_msgger_username","title":"RET_REPLIED_MSGGER_USERNAME","text":"<ul> <li>This Variable Store the Username of the messager to which the current message have been replied to.</li> </ul>"},{"location":"variables/#ret_replied_msg_text","title":"RET_REPLIED_MSG_TEXT","text":"<ul> <li>This Variable Store the Text of the message to which the current message have been replied to.</li> </ul>"},{"location":"variables/#ret_replied_file_id","title":"RET_REPLIED_FILE_ID","text":"<ul> <li>This Variable Store the File ID of the File to which the current message have been replied to.</li> </ul>"},{"location":"variables/#4-stickers","title":"4. Stickers","text":""},{"location":"variables/#sticker_emoji","title":"STICKER_EMOJI","text":"<ul> <li>This Variable Store the Emoji of the Sticker the Update Function returned.</li> </ul>"},{"location":"variables/#sticker_file_id","title":"STICKER_FILE_ID","text":"<ul> <li>This Variable Store the File ID of the Sticker the Update Function returned.</li> </ul>"},{"location":"variables/#sticker_emoji_1","title":"STICKER_EMOJI","text":"<ul> <li>This Variable Store the Name of the Sticker Pack the Update Function returned.</li> </ul>"}]}